     1                                  ; Stack contains some number N
     2                                  ; Print N to stdout in decimal notation
     3                                  
     4                                  %include "my_io.inc"
     1                              <1> %macro _syscall_read 3
     2                              <1>   _syscall_3 3, %1, %2, %3
     3                              <1> %endmacro
     4                              <1> 
     5                              <1> %macro _syscall_write 3
     6                              <1>   _syscall_3 4, %1, %2, %3
     7                              <1> %endmacro
     8                              <1> 
     9                              <1> %macro _syscall_3 4
    10                              <1>   push  %4
    11                              <1>   push  %3
    12                              <1>   push  %2
    13                              <1>   mov eax, %1
    14                              <1>   sub esp, 4
    15                              <1>   int 0x80
    16                              <1>   add esp, 16
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> %macro GETCHAR 0
    20                              <1>   pushf
    21                              <1>   push  edi
    22                              <1>   sub esp, 2
    23                              <1>   mov edi, esp
    24                              <1>   _syscall_read 0, edi, 1
    25                              <1>   cmp eax, 1
    26                              <1>   jne %%eof_reached
    27                              <1>   xor eax,eax
    28                              <1>   mov al, [edi]
    29                              <1>   jmp %%quit
    30                              <1> %%eof_reached:
    31                              <1>   xor eax, eax
    32                              <1>   not eax               ; eax := -1
    33                              <1> %%quit:
    34                              <1>   add esp, 2
    35                              <1>   pop edi
    36                              <1>   popf
    37                              <1> %endmacro
    38                              <1> 
    39                              <1> %macro  PUTCHAR 1
    40                              <1>   pusha
    41                              <1>   pushf
    42                              <1>   mov al, %1
    43                              <1>   sub esp, 2              ; reserve memory for buffer
    44                              <1>   mov edi, esp
    45                              <1>   mov [edi], al
    46                              <1>   _syscall_write 1, edi, 1
    47                              <1>   add esp, 2
    48                              <1>   popf
    49                              <1>   popa
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> ; print string into standard output
    53                              <1> %macro PRINT 1
    54                              <1>   pusha
    55                              <1>   pushf
    56                              <1>   jmp  %%print_str
    57                              <1> %%str db %1, 10, 0
    58                              <1> %%strln equ $-%%str
    59                              <1> %%print_str:
    60                              <1>   _syscall_write 1, %%str, %%strln
    61                              <1>   popf
    62                              <1>   popa
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> %macro SUCCESS_FINISH 0
    66                              <1>   push dword 0          ; "success"
    67                              <1>   mov  eax, 1           ; _exit syscall
    68                              <1>   push eax              ; push anything
    69                              <1>   int  0x80
    70                              <1> %endmacro
     5                                  
     6                                  global print_number
     7                                  
     8                                  section .text
     9                                  print_number:
    10 00000000 55                          push ebp              ; organize stack frame
    11 00000001 89E5                        mov ebp, esp
    12 00000003 9C                          pushf                 ; store flags
    13 00000004 53                          push ebx              ; according CDECL convention EBX should be stored
    14 00000005 8B4508                      mov eax, [ebp+8]      ; store number to print
    15 00000008 BB0A000000                  mov ebx, 10           ; decimal notation
    16 0000000D 31C9                        xor ecx, ecx          ; digits count
    17                                  .save_digits:
    18 0000000F 31D2                        xor edx, edx
    19 00000011 F7F3                        div ebx               ; divide EDX:EAX by 10
    20                                                            ; EAX contains quotient, EDX -- reminder
    21 00000013 83C230                      add edx, '0'          ; get decimal symbol
    22 00000016 52                          push edx              ; push digit to stack
    23 00000017 41                          inc ecx
    24 00000018 85C0                        test eax, eax         ; EAX = 0 ?
    25 0000001A 75F3                        jne .save_digits
    26                                  
    27                                      PUTCHAR 10
    27 0000001C 60                  <1>  pusha
    27 0000001D 9C                  <1>  pushf
    27 0000001E B00A                <1>  mov al, %1
    27 00000020 83EC02              <1>  sub esp, 2
    27 00000023 89E7                <1>  mov edi, esp
    27 00000025 8807                <1>  mov [edi], al
    27                              <1>  _syscall_write 1, edi, 1
    27                              <2>  _syscall_3 4, %1, %2, %3
    27 00000027 6A01                <3>  push %4
    27 00000029 57                  <3>  push %3
    27 0000002A 6A01                <3>  push %2
    27 0000002C B804000000          <3>  mov eax, %1
    27 00000031 83EC04              <3>  sub esp, 4
    27 00000034 CD80                <3>  int 0x80
    27 00000036 83C410              <3>  add esp, 16
    27 00000039 83C402              <1>  add esp, 2
    27 0000003C 9D                  <1>  popf
    27 0000003D 61                  <1>  popa
    28                                  .print_digit:
    29 0000003E 5A                          pop edx
    30                                      PUTCHAR dl
    30 0000003F 60                  <1>  pusha
    30 00000040 9C                  <1>  pushf
    30 00000041 88D0                <1>  mov al, %1
    30 00000043 83EC02              <1>  sub esp, 2
    30 00000046 89E7                <1>  mov edi, esp
    30 00000048 8807                <1>  mov [edi], al
    30                              <1>  _syscall_write 1, edi, 1
    30                              <2>  _syscall_3 4, %1, %2, %3
    30 0000004A 6A01                <3>  push %4
    30 0000004C 57                  <3>  push %3
    30 0000004D 6A01                <3>  push %2
    30 0000004F B804000000          <3>  mov eax, %1
    30 00000054 83EC04              <3>  sub esp, 4
    30 00000057 CD80                <3>  int 0x80
    30 00000059 83C410              <3>  add esp, 16
    30 0000005C 83C402              <1>  add esp, 2
    30 0000005F 9D                  <1>  popf
    30 00000060 61                  <1>  popa
    31 00000061 E2DB                        loop .print_digit
    32                                  .quit:
    33                                      PUTCHAR 10
    33 00000063 60                  <1>  pusha
    33 00000064 9C                  <1>  pushf
    33 00000065 B00A                <1>  mov al, %1
    33 00000067 83EC02              <1>  sub esp, 2
    33 0000006A 89E7                <1>  mov edi, esp
    33 0000006C 8807                <1>  mov [edi], al
    33                              <1>  _syscall_write 1, edi, 1
    33                              <2>  _syscall_3 4, %1, %2, %3
    33 0000006E 6A01                <3>  push %4
    33 00000070 57                  <3>  push %3
    33 00000071 6A01                <3>  push %2
    33 00000073 B804000000          <3>  mov eax, %1
    33 00000078 83EC04              <3>  sub esp, 4
    33 0000007B CD80                <3>  int 0x80
    33 0000007D 83C410              <3>  add esp, 16
    33 00000080 83C402              <1>  add esp, 2
    33 00000083 9D                  <1>  popf
    33 00000084 61                  <1>  popa
    34 00000085 5B                          pop ebx               ; restore EBX
    35 00000086 9D                          popf
    36 00000087 89EC                        mov esp, ebp          ; clean stack frame
    37 00000089 5D                          pop ebp               
    38 0000008A C3                          ret
