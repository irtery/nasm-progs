     1                                  ; Read 3 numbers from stdin: a, b, c
     2                                  ; Let a,b,c be coefficients of quadratic equation
     3                                  ; Solve equation or report that equation has no roots
     4                                  ; Print the whole part of the roots
     5                                  
     6                                  %include "my_io.inc"
     1                              <1> %macro _syscall_read 3
     2                              <1>   _syscall_3 3, %1, %2, %3
     3                              <1> %endmacro
     4                              <1> 
     5                              <1> %macro _syscall_write 3
     6                              <1>   _syscall_3 4, %1, %2, %3
     7                              <1> %endmacro
     8                              <1> 
     9                              <1> %macro _syscall_3 4
    10                              <1>   push  %4
    11                              <1>   push  %3
    12                              <1>   push  %2
    13                              <1>   mov eax, %1
    14                              <1>   sub esp, 4
    15                              <1>   int 0x80
    16                              <1>   add esp, 16
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> %macro GETCHAR 0
    20                              <1>   pushf
    21                              <1>   push  edi
    22                              <1>   sub esp, 2
    23                              <1>   mov edi, esp
    24                              <1>   _syscall_read 0, edi, 1
    25                              <1>   cmp eax, 1
    26                              <1>   jne %%eof_reached
    27                              <1>   xor eax,eax
    28                              <1>   mov al, [edi]
    29                              <1>   jmp %%quit
    30                              <1> %%eof_reached:
    31                              <1>   xor eax, eax
    32                              <1>   not eax               ; eax := -1
    33                              <1> %%quit:
    34                              <1>   add esp, 2
    35                              <1>   pop edi
    36                              <1>   popf
    37                              <1> %endmacro
    38                              <1> 
    39                              <1> %macro  PUTCHAR 1
    40                              <1>   pusha
    41                              <1>   pushf
    42                              <1>   mov al, %1
    43                              <1>   sub esp, 2              ; reserve memory for buffer
    44                              <1>   mov edi, esp
    45                              <1>   mov [edi], al
    46                              <1>   _syscall_write 1, edi, 1
    47                              <1>   add esp, 2
    48                              <1>   popf
    49                              <1>   popa
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> ; print string into standard output
    53                              <1> %macro PRINT 1
    54                              <1>   pusha
    55                              <1>   pushf
    56                              <1>   jmp  %%print_str
    57                              <1> %%str db %1, 10, 0
    58                              <1> %%strln equ $-%%str
    59                              <1> %%print_str:
    60                              <1>   _syscall_write 1, %%str, %%strln
    61                              <1>   popf
    62                              <1>   popa
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> %macro SUCCESS_FINISH 0
    66                              <1>   push dword 0          ; "success"
    67                              <1>   mov  eax, 1           ; _exit syscall
    68                              <1>   push eax              ; push anything
    69                              <1>   int  0x80
    70                              <1> %endmacro
     7                                  
     8                                  global start
     9                                  extern read_number
    10                                  extern print_number
    11                                  
    12                                  section .text
    13                                  start:
    14 00000000 E8(00000000)                call read_number        ; a
    15 00000005 50                          push eax
    16                                  
    17 00000006 E8(00000000)                call read_number        ; b
    18 0000000B 50                          push eax
    19                                  
    20 0000000C E8(00000000)                call read_number        ; c
    21 00000011 50                          push eax
    22                                  
    23 00000012 9BDBE3                      finit                   ; coprocessor in initial state
    24                                  
    25 00000015 E81B000000                  call discriminant       ; result in ST0
    26 0000001A 83C40C                      add esp, 12
    27                                    
    28 0000001D 83EC04                      sub esp, 4
    29 00000020 DB1C24                      fistp dword [esp]
    30 00000023 E8(00000000)                call print_number
    31 00000028 83C404                      add esp, 4
    32                                  .finish:
    33                                      SUCCESS_FINISH
    33 0000002B 6A00                <1>  push dword 0
    33 0000002D B801000000          <1>  mov eax, 1
    33 00000032 50                  <1>  push eax
    33 00000033 CD80                <1>  int 0x80
    34                                  
    35                                  
    36                                  discriminant:               ; suppose a,b,c unsigned
    37 00000035 55                          push ebp                ; organize stack frame
    38 00000036 89E5                        mov ebp, esp
    39 00000038 9C                          pushf                   ; store flags
    40 00000039 D9450C                      fld dword[ebp+12]       ; ST0 = b
    41                                  
    42 0000003C FF750C                      push dword [ebp+12]
    43 0000003F E8(00000000)                call print_number
    44 00000044 83C404                      add esp, 4
    45                                  
    46 00000047 83EC04                      sub esp, 4
    47 0000004A DB1424                      fist dword [esp]
    48 0000004D E8(00000000)                call print_number
    49 00000052 83C404                      add esp, 4
    50                                  
    51 00000055 D9C0                        fld st0                 ; ST0 = b, ST1 = b
    52 00000057 DEC9                        fmulp                   ; ST0 = b*b
    53                                  
    54 00000059 6A04                        push dword 4
    55 0000005B DB0424                      fild dword [esp]        ; ST0 = 4.0, ST1 = b*b
    56 0000005E 83C404                      add esp, 4
    57                                  
    58 00000061 D84D08                      fmul dword[ebp+8]       ; ST0 = 4*a, ST1= b*b
    59 00000064 D84D10                      fmul dword[ebp+16]      ; ST0 = 4*a*c, ST1 = b*b
    60 00000067 DEE9                        fsubp st1, st0          ; ST0 = b*b-4*a*c
    61                                  .quit:
    62 00000069 9D                          popf                    ; cleanup
    63 0000006A 89EC                        mov esp, ebp
    64 0000006C 5D                          pop ebp
    65 0000006D C3                          ret
